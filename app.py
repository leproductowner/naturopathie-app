import streamlit as st
from transformers import AutoModelForCausalLM, AutoTokenizer
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Charger le mod√®le Qwen
model_name = "Qwen/Qwen-7B"  # Remplacez par le mod√®le Qwen que vous souhaitez utiliser
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

# Fonction pour g√©n√©rer le bilan naturopathique
def generer_bilan(sexe, age, etat_civil, occupation, stress_travail, 
                  regime, eau, sucre, sommeil, reveils, 
                  activite_physique, type_activite, jambes_lourdes, tabac, 
                  pollution, respiration, ant_med_perso, ant_med_fam, 
                  digestion, fibres, gestion_stress, satisfaction, raison_consultation):
    
    # Cr√©ation du prompt d√©taill√©
    prompt = f"""
    Agis en tant que naturopathe expert pour √©tablir un bilan naturopathique d√©taill√© en utilisant les informations suivantes :
    
    - **Sexe** : {sexe}
    - **√Çge** : {age}
    - **√âtat civil** : {etat_civil}
    - **Occupation** : {occupation}
    - **Niveau de stress au travail** : {stress_travail}
    - **R√©gime alimentaire** : {regime}
    - **Consommation d'eau quotidienne** : {eau}
    - **Consommation de sucre** : {sucre}
    - **Heures de sommeil** : {sommeil}
    - **R√©veils nocturnes** : {reveils}
    - **Activit√© physique** : {activite_physique}
    - **Type d'activit√© physique** : {type_activite}
    - **Sensation de jambes lourdes** : {jambes_lourdes}
    - **Tabagisme** : {tabac}
    - **Exposition √† la pollution** : {pollution}
    - **Pratique de respiration (ex. m√©ditation)** : {respiration}
    - **Ant√©c√©dents m√©dicaux personnels** : {ant_med_perso}
    - **Ant√©c√©dents m√©dicaux familiaux** : {ant_med_fam}
    - **Probl√®mes digestifs** : {digestion}
    - **Consommation de fibres** : {fibres}
    - **Gestion du stress** : {gestion_stress}
    - **Satisfaction globale dans la vie** : {satisfaction}
    - **Raison de la consultation** : {raison_consultation}
    
    Fournis des recommandations d√©taill√©es couvrant les cat√©gories suivantes :
    
    1Ô∏è‚É£ **Alimentation** üçè  
    2Ô∏è‚É£ **Sommeil** üò¥  
    3Ô∏è‚É£ **Activit√© physique** üèÉ‚Äç‚ôÇÔ∏è  
    4Ô∏è‚É£ **Gestion du stress** üåø  
    5Ô∏è‚É£ **Respiration** üí®  
    6Ô∏è‚É£ **Autres aspects pertinents pour la sant√© globale** üßò‚Äç‚ôÇÔ∏è  
    """

    # G√©n√©rer le texte avec Qwen
    inputs = tokenizer(prompt, return_tensors="pt")
    outputs = model.generate(inputs["input_ids"], max_length=500, do_sample=True, temperature=0.7)
    bilan_text = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # G√©n√©rer le PDF
    pdf_filename = "bilan_naturopathique.pdf"
    c = canvas.Canvas(pdf_filename, pagesize=letter)
    c.setFont("Helvetica", 12)
    
    y_position = 750
    for line in bilan_text.split("\n"):
        c.drawString(50, y_position, line)
        y_position -= 20
        if y_position < 50:
            c.showPage()
            y_position = 750

    c.save()
    
    return bilan_text, pdf_filename

# Interface Streamlit
st.title("Bilan Naturopathique Personnalis√©")
st.write("Remplissez ce formulaire et recevez un bilan naturopathique d√©taill√© avec un fichier PDF t√©l√©chargeable.")

with st.form("bilan_form"):
    sexe = st.radio("Sexe", ["Homme", "Femme", "Autre"])
    age = st.radio("√Çge", ["Moins de 18 ans", "18-30 ans", "31-50 ans", "Plus de 50 ans"])
    etat_civil = st.radio("√âtat civil", ["C√©libataire", "Mari√©(e)", "Divorc√©(e)", "Veuf/Veuve"])
    occupation = st.text_input("Occupation")
    stress_travail = st.radio("Niveau de stress au travail", ["Faible", "Mod√©r√©", "√âlev√©"])
    regime = st.radio("R√©gime alimentaire", ["Omnivore", "V√©g√©tarien", "V√©g√©talien", "Autre"])
    eau = st.radio("Consommation d'eau quotidienne", ["Moins de 1 litre", "1-2 litres", "Plus de 2 litres"])
    digestion = st.text_input("Probl√®mes de digestion")
    raison_consultation = st.text_input("Raison de la consultation")

    submitted = st.form_submit_button("G√©n√©rer le bilan")
    if submitted:
        bilan_text, pdf_filename = generer_bilan(
            sexe, age, etat_civil, occupation, stress_travail, 
            regime, eau, "", "", "", "", "", "", "", 
            "", "", digestion, "", "", "", raison_consultation
        )
        st.write("### R√©sum√© du bilan")
        st.write(bilan_text)
        with open(pdf_filename, "rb") as pdf_file:
            st.download_button("T√©l√©charger le bilan PDF", pdf_file, file_name=pdf_filename)
